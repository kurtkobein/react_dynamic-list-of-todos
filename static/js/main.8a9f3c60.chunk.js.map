{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","searchRequest","filterBy","setChangedValue","e","target","name","value","setState","prevState","getfilteredTodos","todos","props","filter","completed","title","toLowerCase","includes","this","isLoading","selectedUserId","setTodosByChecked","setSelectedUserId","className","type","placeholder","onChange","map","todo","classNames","checked","id","userId","onClick","React","Component","wait","delay","Promise","resolve","setTimeout","getResponse","endpoint","a","fetch","response","json","CurrentUser","selectedUser","setIsLoading","loadData","newSelectedUser","clearCurrentUser","clearUser","email","phone","App","componentDidMount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a9f3c60.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  isLoading: boolean,\n  selectedUserId: number,\n  setTodosByChecked: (id: number) => void;\n  setSelectedUserId: (id: number) => void;\n};\n\ntype State = {\n  searchRequest: string,\n  filterBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    searchRequest: '',\n    filterBy: 'all',\n  };\n\n  setChangedValue = (e: React.ChangeEvent<HTMLSelectElement>\n  | React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    this.setState(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  getfilteredTodos = () => {\n    const { todos } = this.props;\n    const { filterBy, searchRequest } = this.state;\n\n    const filteredTodosByComplete = todos.filter(({ completed }) => {\n      switch (filterBy) {\n        case 'active':\n          return !completed;\n        case 'completed':\n          return completed;\n        default:\n          return true;\n      }\n    });\n\n    const filteredTodosByTitle = filteredTodosByComplete.filter(({ title }) => {\n      return title.toLowerCase().includes(searchRequest.toLowerCase());\n    });\n\n    return filteredTodosByTitle;\n  };\n\n  render() {\n    const {\n      isLoading,\n      selectedUserId,\n      setTodosByChecked,\n      setSelectedUserId,\n    } = this.props;\n    const { getfilteredTodos, setChangedValue } = this;\n    const todos = getfilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Find todo:\n          <input\n            type=\"text\"\n            className=\"TodoList__search-bar\"\n            placeholder=\"write a title\"\n            value={this.state.searchRequest}\n            onChange={setChangedValue}\n            name=\"searchRequest\"\n          />\n        </label>\n        <select onChange={setChangedValue} name=\"filterBy\">\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          {isLoading ? (\n            <div className=\"loader\" />\n          ) : (\n            <ul className=\"TodoList__list\">\n              {todos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--unchecked': !todo.completed },\n                    { 'TodoList__item--checked': todo.completed },\n                  )}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => setTodosByChecked(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                      'button',\n                    )}\n                    type=\"button\"\n                    onClick={() => setSelectedUserId(todo.userId)}\n                  >\n                    User #\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst wait = (delay: number) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const getResponse = async (endpoint: string) => {\n  try {\n    await wait(1000);\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    return error;\n  }\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getResponse } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void;\n};\n\ntype State = {\n  selectedUser: User | null,\n  isLoading: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(props: Props) {\n    if (props.selectedUserId !== this.props.selectedUserId) {\n      this.setIsLoading();\n      this.loadData();\n    }\n  }\n\n  setIsLoading = () => {\n    this.setState({ isLoading: true });\n  };\n\n  loadData = async () => {\n    const newSelectedUser = await getResponse(`users/${this.props.selectedUserId}`);\n\n    this.setState({ selectedUser: newSelectedUser, isLoading: false });\n  };\n\n  clearCurrentUser = () => {\n    this.props.clearUser();\n    this.setState({ selectedUser: null });\n  };\n\n  render() {\n    const { selectedUser, isLoading } = this.state;\n    const { clearCurrentUser } = this;\n\n    return (\n      <div className=\"CurrentUser\">\n        {isLoading ? (\n          <div className=\"loader\" />\n        ) : (\n          selectedUser && (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                {'Selected user: '}\n                {selectedUser.id}\n              </h2>\n              <h3 className=\"CurrentUser__name\">\n                {selectedUser.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {selectedUser.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {selectedUser.phone}\n              </p>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={clearCurrentUser}\n              >\n                Clear\n              </button>\n            </>\n          )\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getResponse } from './api';\n\ninterface State {\n  todos: Todo[] | [],\n  selectedUserId: number,\n  isLoading: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    isLoading: true,\n  };\n\n  componentDidMount = async () => {\n    this.setState({ todos: await getResponse('todos'), isLoading: false });\n  };\n\n  setSelectedUserId = (id: number) => {\n    if (this.state.selectedUserId !== id) {\n      this.setState({ selectedUserId: id });\n    }\n  };\n\n  setTodosByChecked = (id: number) => {\n    this.setState(state => {\n      const newTodos = state.todos.map(todo => {\n        return todo.id === id\n          ? { ...todo, completed: !todo.completed }\n          : todo;\n      });\n\n      return { todos: newTodos };\n    });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId, isLoading } = this.state;\n    const { setTodosByChecked, setSelectedUserId, clearUser } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            isLoading={isLoading}\n            selectedUserId={selectedUserId}\n            setTodosByChecked={setTodosByChecked}\n            setSelectedUserId={setSelectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearUser={clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}